name: CI/CD - Build and Deploy to Remote Host

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Fetch AI Model from Bucket
        run: |
          API_URL=${{ secrets.OCI_BUCKET_URL }}
          OBJECT_NAME=$(curl -s "$API_URL" | jq -r '.objects[0].name')
          
          if [ -z "$OBJECT_NAME" ]; then
            echo "No model objects found in the bucket."
            exit 1
          fi
          
          echo "Downloading model object: $OBJECT_NAME"
          DOWNLOAD_URL="${API_URL}/${OBJECT_NAME}"
          mkdir -p src/qshing_server/service/model/
          curl -L -o "src/qshing_server/service/model/best_acc_model.pt" "$DOWNLOAD_URL"
          
          echo "Verifying model file:"
          ls -lh src/qshing_server/service/model/

      - name: Create .env file
        run: |
          cat > .env << EOF
          # MongoDB Configuration
          MONGODB_USER=${{ secrets.MONGODB_USER }}
          MONGODB_PASSWORD=${{ secrets.MONGODB_PASSWORD }}
          MONGODB_HOST=140.245.65.59
          MONGODB_PORT=${{ secrets.MONGODB_PORT }}
          MONGODB_NAME=${{ secrets.MONGODB_NAME }}
          MONGO_URI=mongodb://${{ secrets.MONGODB_USER }}:${{ secrets.MONGODB_PASSWORD }}@140.245.65.59:${{ secrets.MONGODB_PORT }}/${{ secrets.MONGODB_NAME }}
          
          # PostgreSQL Configuration
          POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_HOST=140.245.65.59
          POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}
          POSTGRES_DB=${{ secrets.POSTGRES_DB }}
          
          # Redis Configuration
          REDIS_HOST=140.245.65.59
          REDIS_PORT=${{ secrets.REDIS_PORT }}
          REDIS_DB=${{ secrets.REDIS_DB }}
          
          # Hugging Face cache directories
          HF_HOME=/tmp/huggingface
          TRANSFORMERS_CACHE=/tmp/huggingface/transformers
          HF_DATASETS_CACHE=/tmp/huggingface/datasets
          HUGGINGFACE_HUB_CACHE=/tmp/huggingface/hub
          TMPDIR=/tmp
          
          # Chrome optimization flags
          CHROME_FLAGS=--no-sandbox --disable-dev-shm-usage --disable-gpu --disable-extensions --disable-plugins --disable-images --disable-javascript --memory-pressure-off --max_old_space_size=4096
          EOF
          
          chmod 600 .env
          echo ".env file created successfully"

      - name: Build Docker Image
        run: |
          COMMIT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          IMAGE_TAG="qshing-server:${COMMIT_SHA}"
          
          docker buildx build \
            --platform linux/arm64 \
            --build-arg HF_HOME=/tmp/huggingface \
            --build-arg TRANSFORMERS_CACHE=/tmp/huggingface/transformers \
            --build-arg HF_DATASETS_CACHE=/tmp/huggingface/datasets \
            --build-arg HUGGINGFACE_HUB_CACHE=/tmp/huggingface/hub \
            --build-arg TMPDIR=/tmp \
            --load \
            -t ${IMAGE_TAG} \
            .
          
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV
          echo "Built image: ${IMAGE_TAG}"

      - name: Save Docker Image
        run: |
          docker save ${{ env.IMAGE_TAG }} | gzip > qshing-server-image.tar.gz
          echo "Docker image saved to qshing-server-image.tar.gz"

      - name: Copy files to remote server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: 134.185.102.63
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.REMOTE_SSH_KEY }}
          source: "qshing-server-image.tar.gz,.env,docker-compose.prod.yml"
          target: "/home/${{ secrets.REMOTE_USER }}/qshing-server/"
          strip_components: 0

      - name: Deploy to remote server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: 134.185.102.63
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.REMOTE_SSH_KEY }}
          script: |
            cd /home/${{ secrets.REMOTE_USER }}/qshing-server/
            
            # Load the new Docker image
            echo "Loading Docker image..."
            docker load < qshing-server-image.tar.gz
            
            # Get the image tag from the loaded image
            COMMIT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
            IMAGE_TAG="qshing-server:${COMMIT_SHA}"
            
            # Update the docker-compose file with the new image tag
            sed -i "s|image: qshing-server:.*|image: ${IMAGE_TAG}|g" docker-compose.prod.yml
            
            # Stop existing container if running
            echo "Stopping existing containers..."
            docker-compose -f docker-compose.prod.yml down || true
            
            # Remove old images (keep last 3 versions)
            echo "Cleaning up old images..."
            docker images qshing-server --format "table {{.Repository}}\t{{.Tag}}\t{{.ID}}" | tail -n +2 | sort -k2 -r | tail -n +4 | awk '{print $3}' | xargs -r docker rmi || true
            
            # Start the new container
            echo "Starting new containers..."
            docker-compose -f docker-compose.prod.yml up -d
            
            # Clean up the transferred image file
            rm -f qshing-server-image.tar.gz
            
            echo "Deployment completed successfully!"
            
            # Show running containers and logs
            docker ps
            echo "Recent logs:"
            docker-compose -f docker-compose.prod.yml logs --tail=20
